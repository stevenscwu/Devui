name: SonarQube + GPT-4.1 Security Scan (Angular)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  sonar-gpt:
    runs-on: ubuntu-latest

    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      SONAR_PROJECT_KEY: Devui
      AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
      BLOB_SAS_TOKEN: ${{ secrets.BLOB_SAS_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for SonarQube to get full history

      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm ci

      - name: Build Angular project
        run: npm run build --if-present
  
      - name: Run ESLint
        run: npx eslint "src/**/*.{ts,html}" --format json -o eslint-report.json --no-error-on-unmatched-pattern || true

      - name: Download SonarScanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          export PATH="$PATH:$(pwd)/sonar-scanner-5.0.1.3006-linux/bin"
        
      - name: Run SonarQube Scan
        id: sonar
        run: |
          ./sonar-scanner-*/bin/sonar-scanner \
            -Dsonar.projectKey=Deuvi \
            -Dsonar.host.url=http://13.89.226.182:9000 \
            -Dsonar.token=${{ env.SONAR_TOKEN }} \
            -Dsonar.qualitygate.wait=true \

          #  -Dsonar.scm.provider=git || true
          
          # Store the task ID for later API calls
          TASK_ID=$(cat .scannerwork/report-task.txt | grep ceTaskId | cut -d'=' -f2)
          echo "TASK_ID=$TASK_ID" >> $GITHUB_ENV

      # Fetch analysis results from SonarQube API
      - name: Fetch SonarQube analysis results
        run: |
          # Wait for analysis to complete
          sleep 10
          
          # Get analysis ID from task ID
          ANALYSIS_ID=$(curl -s -u ${{ env.SONAR_TOKEN }}: "${{ env.SONAR_HOST_URL }}/api/ce/task?id=$TASK_ID" | jq -r '.task.analysisId')
          
          if [ -z "$ANALYSIS_ID" ] || [ "$ANALYSIS_ID" == "null" ]; then
            echo "Failed to get analysis ID. Waiting longer..."
            sleep 20
            ANALYSIS_ID=$(curl -s -u ${{ env.SONAR_TOKEN }}: "${{ env.SONAR_HOST_URL }}/api/ce/task?id=$TASK_ID" | jq -r '.task.analysisId')
          fi
          
          if [ -z "$ANALYSIS_ID" ] || [ "$ANALYSIS_ID" == "null" ]; then
            echo "Still failed to get analysis ID. Using component search instead..."
            ANALYSIS_ID=$(curl -s -u ${{ env.SONAR_TOKEN }}: "${{ env.SONAR_HOST_URL }}/api/project_analyses/search?project=${{ env.SONAR_PROJECT_KEY }}&ps=1" | jq -r '.analyses[0].key')
          fi
          
          echo "ANALYSIS_ID=$ANALYSIS_ID" >> $GITHUB_ENV
          
          # Fetch issues from the analysis
          curl -s -u ${{ env.SONAR_TOKEN }}: "${{ env.SONAR_HOST_URL }}/api/issues/search?projectKeys=${{ env.SONAR_PROJECT_KEY }}&ps=500" > sonar-report.json

      - name: Upload SonarQube Reports using Azure CLI with SAS Token
        env:
          AZURE_STORAGE_SAS_TOKEN: ${{ secrets.BLOB_SAS_TOKEN }}
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_CONTAINER: sonarinput
        run: |
          sudo apt-get update && sudo apt-get install -y jq azure-cli

          TIMESTAMP=$(date +%Y%m%d)
          FOLDER_DATE=$(date +%Y%m%d)

          BEAUTIFIED="sonar-report-${TIMESTAMP}.json"
          jq '.' sonar-report.json > "$BEAUTIFIED"

          REDUCED="reduced-sonar-report-${TIMESTAMP}.json"
          jq '{issues: [.issues[] | {file: .component, message: .message, severity: .severity, rule: .rule, line: .line, effort: .effort, type: .type}]}' "$BEAUTIFIED" > "$REDUCED"

          # Explicit Azure CLI upload with --auth-mode key and proper SAS token
          for FILE in "$BEAUTIFIED" "$REDUCED"; do
            az storage blob upload \
              --account-name "$AZURE_STORAGE_ACCOUNT" \
              --container-name "$AZURE_STORAGE_CONTAINER" \
              --name "$FILE" \
              --file "$FILE" \
              --sas-token "$AZURE_STORAGE_SAS_TOKEN" \
              --auth-mode key
          done

          mkdir -p "report/${FOLDER_DATE}"
          cp "$BEAUTIFIED" "report/${FOLDER_DATE}/"
          cp "$REDUCED" "report/${FOLDER_DATE}/"
          echo "Reports saved to report/${FOLDER_DATE}/"


      - name: Job complete
        run: echo "SonarQube scan finished and report uploaded for GPT-4.1 analysis."